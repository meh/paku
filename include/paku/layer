#pragma once

#include <paku/common>

#include <paku/packet/ether>
#include <paku/packet/ip>
#include <paku/packet/icmp>
#include <paku/packet/tcp>

namespace paku {
	typedef int NONE;

	template<typename Type, typename Parent = NONE>
	class layer_base {
		public:
			layer_base(const void* buffer, size_t length)
				: _buffer(static_cast<const uint8_t*>(buffer)),
					_length(length),
					_value(reinterpret_cast<const typename Type::raw*>(buffer))
			{ }

			layer_base(Parent parent, const void* buffer, size_t length)
				: layer_base(buffer, length)
			{
				_parent = parent;
			}

		public:
			const uint8_t*
			buffer() const
			{
				return _buffer;
			}

			size_t
			length() const
			{
				return _length;
			}

			optional<Parent>
			parent() const
			{
				return _parent;
			}

			const Type&
			value() const
			{
				return _value;
			}

			Type* operator->()
			{
				return &_value;
			}

		private:
			const uint8_t* _buffer;
			size_t         _length;

			optional<Parent> _parent;
			Type             _value;
	};

	template<typename Type, typename Parent = NONE>
	class layer : public layer_base<Type, Parent> {
		public:
			layer(const void* buffer, size_t length)
				: layer_base<Type, Parent>(buffer, length)
			{ }

			layer(Parent parent, const void* buffer, size_t length)
				: layer_base<Type, Parent>(parent, buffer, length)
			{ }
	};

	template<typename Parent>
	class layer<packet::icmp, Parent> : public layer_base<packet::icmp, Parent> {
		public:
			layer(const void* buffer, size_t length)
				: layer_base<packet::icmp, Parent>(buffer, length)
			{ check(); }

			layer(Parent parent, const void* buffer, size_t length)
				: layer_base<packet::icmp, Parent>(parent, buffer, length)
			{ check(); }

		private:
			void
			check()
			{
				// base ICMP fields
				if (this->length() < 4) {
					throw std::length_error("buffer too small");
				}

				switch (this->value().type()) {
					case packet::icmp::ECHO_REQUEST:
					case packet::icmp::ECHO_REPLY: {
						if (this->length() < 8) {
							throw std::length_error("buffer too small");
						}

						break;
					}

					case packet::icmp::TIMESTAMP_REQUEST:
					case packet::icmp::TIMESTAMP_REPLY: {
						if (this->length() < 20) {
							throw std::length_error("buffer too small");
						}

						break;
					}

					case packet::icmp::INFORMATION_REQUEST:
					case packet::icmp::INFORMATION_REPLY: {
						if (this->length() < 8) {
							throw std::length_error("buffer too small");
						}

						break;
					}

					case packet::icmp::DESTINATION_UNREACHABLE:
					case packet::icmp::TIME_EXCEEDED:
					case packet::icmp::SOURCE_QUENCH:
					case packet::icmp::PARAMETER_PROBLEM:
					case packet::icmp::REDIRECT_MESSAGE: {
						// base ICMP fields, unused field and IP IHL
						if (this->length() < 9) {
							throw std::length_error("buffer too small");
						}

						auto prev = this->value().template details<packet::icmp::previous>();

						// base ICMP fields, unused field, IP header, original data
						if (this->length() < 8 + (static_cast<size_t>(prev.header().header()) * 4) + 8) {
							throw std::length_error("buffer too small");
						}

						break;
					}

					default: {
						if (this->length() < 8) {
							throw std::length_error("buffer too small");
						}
					}
				}
			}
	};

	template<typename Parent>
	class layer<packet::ip, Parent> : public layer_base<packet::ip, Parent> {
		public:
			layer(const void* buffer, size_t length)
				: layer_base<packet::ip, Parent>(buffer, length)
			{ check(); }

			layer(Parent parent, const void* buffer, size_t length)
				: layer_base<packet::ip, Parent>(parent, buffer, length)
			{ check(); }

		private:
			void
			check()
			{
				// header length
				if (this->length() < 1) {
					throw std::length_error("buffer too small");
				}

				// total length
				if (this->length() < this->value().header() * 4) {
					throw std::length_error("buffer too small");
				}
			}

		public:
			layer<packet::icmp, layer<packet::ip>>
			icmp()
			{
				if (this->value().protocol() != packet::ip::ICMP) {
					throw std::invalid_argument("wrong packet type");
				}

				return layer<packet::icmp, layer<packet::ip>>(*this,
					this->buffer() + (this->value().header() * 4),
					this->length() - (this->value().header() * 4));
			}

			layer<packet::tcp, layer<packet::ip>>
			tcp()
			{
				if (this->value().protocol() != packet::ip::TCP) {
					throw std::invalid_argument("wrong packet type");
				}

				return layer<packet::tcp, layer<packet::ip>>(*this,
					this->buffer() + (this->value().header() * 4),
					this->length() - (this->value().header() * 4));
			}
	};

	template<>
	class layer<packet::ether, NONE> : public layer_base<packet::ether, NONE> {
		public:
			layer(const void* buffer, size_t length)
				: layer_base<packet::ether, NONE>(buffer, length)
			{ check(); }

		private:
			void
			check()
			{
				if (this->length() < sizeof(packet::ether::raw)) {
					throw std::length_error("buffer too small");
				}
			}

		public:
			layer<packet::ip, layer<packet::ether>>
			ip()
			{
				if (this->value().type() != packet::ether::IPv4) {
					throw std::invalid_argument("wrong packet type");
				}

				return layer<packet::ip, layer<packet::ether>>(*this,
					this->buffer() + sizeof(packet::ether::raw),
					this->length() - sizeof(packet::ether::raw));
			}
	};
}
